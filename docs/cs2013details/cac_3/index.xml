<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CAC_3 on PDC Unplugged</title>
    <link>https://www.pdcunplugged.org/cs2013details/cac_3/</link>
    <description>Recent content in CAC_3 on PDC Unplugged</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Nov 2019 10:59:45 -0400</lastBuildDate>
    
	<atom:link href="https://www.pdcunplugged.org/cs2013details/cac_3/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>OrangeGame</title>
      <link>https://www.pdcunplugged.org/activities/orangegame/</link>
      <pubDate>Fri, 01 Nov 2019 10:59:45 -0400</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/orangegame/</guid>
      <description>Original Author/link CSUnplugged.Org
CS2013 Knowledge Unit Coverage PD/Communication and Coordination Core Tier 2 Give an example of a scenario in which blocking message sends can deadlock. [Usage]  TCPP Coverage Programming Topics  Comprehend Deadlocks: Understand what a deadlock is, and methods for detecting and preventing them  Recommended Courses  K-12: CSUnplugged recommends this as a K-12 activity Systems/OS: The activity can also be used to introduce the concepts of concurrency and deadlock in undergraduate courses.</description>
    </item>
    
  </channel>
</rss>