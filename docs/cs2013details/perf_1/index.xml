<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perf_1 on PDC Unplugged</title>
    <link>http://suzannejmatthews.github.io/PDC-Unplugged/cs2013details/perf_1/</link>
    <description>Recent content in Perf_1 on PDC Unplugged</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Dec 2019 13:09:20 -0500</lastBuildDate>
    
	<atom:link href="http://suzannejmatthews.github.io/PDC-Unplugged/cs2013details/perf_1/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>FindOldestPenny</title>
      <link>http://suzannejmatthews.github.io/PDC-Unplugged/activities/findoldestpenny/</link>
      <pubDate>Fri, 06 Dec 2019 13:09:20 -0500</pubDate>
      
      <guid>http://suzannejmatthews.github.io/PDC-Unplugged/activities/findoldestpenny/</guid>
      <description>Original Author/link This activity was originally proposed by Mary Smith and Srishti Srivastava, with consultation from Brett A Becker.
Paper (Srivastava2019) and slides available on-line.
Similar Activities FindSmallestCard, FindYoungestStudent
Details See paper for details. In summary, the goal is to find the oldest penny in a pile of pennies. This is first done sequentially, with one student trying to determine the oldest penny in a group of 50 pennies. Next, two students are employed, with each student getting a bag of 25 pennies.</description>
    </item>
    
    <item>
      <title>JigsawPuzzle</title>
      <link>http://suzannejmatthews.github.io/PDC-Unplugged/activities/jigsawpuzzle/</link>
      <pubDate>Mon, 04 Nov 2019 13:12:43 -0500</pubDate>
      
      <guid>http://suzannejmatthews.github.io/PDC-Unplugged/activities/jigsawpuzzle/</guid>
      <description>Original Author/link Oklahoma Supercomputing Center for Educaton and Research (OSCER)
&amp;ldquo;Supercomputing in Plain English&amp;rdquo; - Overview, Slides 45-52.
 Available in: PPT and PDF Also described in (Neeman2006)  Variations It is theoretically possible to &amp;ldquo;act out&amp;rdquo; the analogy by using an actual puzzle. However, the puzzle needs to be small enough to enable students to complete the puzzle in a reasonable amount of time. This variation is described in (Neeman2006):</description>
    </item>
    
    <item>
      <title>SieveOfErastothenes</title>
      <link>http://suzannejmatthews.github.io/PDC-Unplugged/activities/sieveoferastothenes/</link>
      <pubDate>Mon, 04 Nov 2019 10:56:26 -0500</pubDate>
      
      <guid>http://suzannejmatthews.github.io/PDC-Unplugged/activities/sieveoferastothenes/</guid>
      <description>Original Author/link Originally described by Gregory F. Bachelis, David A. James, Bruce R. Maxim and Quentin F. Stout (Maxim1990, Bachelis1994). Also described by Michelle Moore (Moore2000) and (Kitchen1992).
No web-link to independent description available. See papers (Bachelis1994, Moore2000) for additional details.
Other activities by authors (Bachelis1994): ParallelAddition, FindSmallestCard, OddEvenTranspositionSort
(Moore2000): CardSorting, OddEvenTranspositionSort, MatrixAddition
Details Suppose the goal is to find all the primes less than n = 1,000. In the serial case, all the numbers from 2 .</description>
    </item>
    
    <item>
      <title>CandySorting</title>
      <link>http://suzannejmatthews.github.io/PDC-Unplugged/activities/candysorting/</link>
      <pubDate>Fri, 01 Nov 2019 14:23:28 -0400</pubDate>
      
      <guid>http://suzannejmatthews.github.io/PDC-Unplugged/activities/candysorting/</guid>
      <description>Original Author/link iPDC Modules
 Available in Word and PDF  CS2013 Knowledge Unit Coverage Parallel Decomposition (Core Tier 1, Core Tier 2) 1. Core Tier 1: Explain why synchronization is necessary in a specific parallel program. [Usage]
2. Core Tier 1: Identify opportunities to partition a serial program into independent parallel modules. [Familiarity]
4. Core Tier 2: Parallelize an algorithm by applying task-based decomposition. [Usage]
Parallel Performance (Elective) 1.</description>
    </item>
    
    <item>
      <title>CardSorting</title>
      <link>http://suzannejmatthews.github.io/PDC-Unplugged/activities/cardsorting/</link>
      <pubDate>Fri, 01 Nov 2019 12:39:05 -0400</pubDate>
      
      <guid>http://suzannejmatthews.github.io/PDC-Unplugged/activities/cardsorting/</guid>
      <description>Original Author/link Originally described by Gregory F. Bachelis, David A. James, Bruce R. Maxim and Quentin F. Stout (Bachelis1994). Also alluded to by Garcia and (Moore2000).
Variation using a deck of playing cards by (Ghafoor2019):
iPDC Modules
 Available in Word and PDF  Similiar Exercises: Sorting: oddEvenTranspositionSort, ParallelRadixSort, PipelineSort, sortingNetwork
Other activities by authors (Bachelis1994): ParallelAddition, FindSmallestCard, SieveOfErastothenes, OddEvenTranspositionSort, PipelineSort
(Moore2000): SieveOfErastothenes, OddEvenTranspositionSort, MatrixAddition
(Ghafoor2019):
Details From (Bachelis1994): The goal is to sort a deck of 16 cards (it is assumed that there are unique numbers) using parallel selection sort.</description>
    </item>
    
  </channel>
</rss>