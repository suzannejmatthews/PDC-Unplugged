<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TCPP_Programming on PDC Unplugged</title>
    <link>http://suzannejmatthews.github.io/PDC-Unplugged/tcpp/tcpp_programming/</link>
    <description>Recent content in TCPP_Programming on PDC Unplugged</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 Dec 2019 10:46:11 -0500</lastBuildDate>
    
	<atom:link href="http://suzannejmatthews.github.io/PDC-Unplugged/tcpp/tcpp_programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AddLargeNumbers</title>
      <link>http://suzannejmatthews.github.io/PDC-Unplugged/activities/addlargenumbers/</link>
      <pubDate>Wed, 11 Dec 2019 10:46:11 -0500</pubDate>
      
      <guid>http://suzannejmatthews.github.io/PDC-Unplugged/activities/addlargenumbers/</guid>
      <description>Original Author/link Originally described by Gregory F. Bachelis, David A. James, Bruce R. Maxim and Quentin F. Stout (Bachelis1994)
No link to independent description publicly available. Please see details section for a synopsis.
Other activities by authors (Bachelis1994): FindSmallestCard, CardSorting, OddEvenTranspositionSort, SieveOfErastothenes, ParallelAddition
Details From (Bachelis1994): The goal is to introduce students to how large pairs of numbers in parallel.
Suppose the goal is to add two large numbers (in this example, 534,789,213 and 495,378,388).</description>
    </item>
    
    <item>
      <title>ParallelAddition</title>
      <link>http://suzannejmatthews.github.io/PDC-Unplugged/activities/paralleladdition/</link>
      <pubDate>Mon, 09 Dec 2019 15:43:45 -0500</pubDate>
      
      <guid>http://suzannejmatthews.github.io/PDC-Unplugged/activities/paralleladdition/</guid>
      <description>Original Author/link Originally described by Gregory F. Bachelis, David A. James, Bruce R. Maxim and Quentin F. Stout (Bachelis1994)
No link to independent description publicly available. Please see details section for a synopsis.
Other activities by authors (Bachelis1994): FindSmallestCard, CardSorting, OddEvenTranspositionSort, SieveOfErastothenes, AddLargeNumbers
Details From (Bachelis1994): The goal is to add a series of 16 random numbers. Each student is given a piece of paper (representing local memory) that only they have access to.</description>
    </item>
    
    <item>
      <title>FindSmallestCard</title>
      <link>http://suzannejmatthews.github.io/PDC-Unplugged/activities/findsmallestcard/</link>
      <pubDate>Mon, 09 Dec 2019 14:34:15 -0500</pubDate>
      
      <guid>http://suzannejmatthews.github.io/PDC-Unplugged/activities/findsmallestcard/</guid>
      <description>Original Author/link Originally described by Gregory F. Bachelis, David A. James, Bruce R. Maxim and Quentin F. Stout (Bachelis1994)
No link to independent description publicly available. Please see details section for a synopsis.
Similar Activites FindOldestPenny, FindYoungestStudent
Other activities by authors (Bachelis1994): ParallelAddition. CardSorting, OddEvenTranspositionSort, SieveOfErastothenes
Details From (Bachelis1994): The goal is to find the smallest card (e.g. lowest value card) in a collection of 16 cards. The notion of a &amp;ldquo;two-card comparator&amp;rdquo; is discussed as part of the process (e.</description>
    </item>
    
    <item>
      <title>ConcertTickets</title>
      <link>http://suzannejmatthews.github.io/PDC-Unplugged/activities/concerttickets/</link>
      <pubDate>Fri, 06 Dec 2019 17:54:13 -0500</pubDate>
      
      <guid>http://suzannejmatthews.github.io/PDC-Unplugged/activities/concerttickets/</guid>
      <description>Original Author/link Originally described by Yifat Ben-David Kolikant (Kolinkat2001). Modified for a CS1 audience by Gary Lewandowski, Dennis Bouvier, Robert McCartney, Kate Sanders, and Beth Simon in 2007 (Lewandowski2007, Lewandowski2010)
No on-line resources available. See details for description.
Details CS1 Use-Case The following scenario is presented to students entering CS1 on their first day (Lewandowski2010):
 Suppose a Ticket Sale Company sells concert tickets in the following way: When a customer calls and asks for a n seats, the seller (1) finds the n best avaiable seats; (2) marks those n seats as unavailable; and (3) deals with customer payment options and either e-mails ticket receipt or sends tickets to the Will Call Box Office (lets customer pick up tickets day of show).</description>
    </item>
    
    <item>
      <title>MoreProcessorsNotAlwaysBetter</title>
      <link>http://suzannejmatthews.github.io/PDC-Unplugged/activities/moreprocessorsnotalwaysbetter/</link>
      <pubDate>Fri, 06 Dec 2019 14:17:02 -0500</pubDate>
      
      <guid>http://suzannejmatthews.github.io/PDC-Unplugged/activities/moreprocessorsnotalwaysbetter/</guid>
      <description>Original Author/link This activity was originally proposed by Mary Smith and Srishti Srivastava.
Paper (Srivastava2019) and slides available on-line.
Details See paper for details. In summary, the goal is to write the statement &amp;ldquo;More Processors Are Not Always The Best&amp;rdquo;, along with the indices of each letter.
 Sequential phase. In the sequential phase, a single student is instructed to first write the statement show above (task 1) and then write the index associated with each letter (0 .</description>
    </item>
    
    <item>
      <title>FindOldestPenny</title>
      <link>http://suzannejmatthews.github.io/PDC-Unplugged/activities/findoldestpenny/</link>
      <pubDate>Fri, 06 Dec 2019 13:09:20 -0500</pubDate>
      
      <guid>http://suzannejmatthews.github.io/PDC-Unplugged/activities/findoldestpenny/</guid>
      <description>Original Author/link This activity was originally proposed by Mary Smith and Srishti Srivastava, with consultation from Brett A Becker.
Paper (Srivastava2019) and slides available on-line.
Similar Activities FindSmallestCard, FindYoungestStudent
Details See paper for details. In summary, the goal is to find the oldest penny in a pile of pennies. This is first done sequentially, with one student trying to determine the oldest penny in a group of 50 pennies. Next, two students are employed, with each student getting a bag of 25 pennies.</description>
    </item>
    
    <item>
      <title>ByzantineGenerals</title>
      <link>http://suzannejmatthews.github.io/PDC-Unplugged/activities/byzantinegenerals/</link>
      <pubDate>Wed, 13 Nov 2019 14:02:06 -0500</pubDate>
      
      <guid>http://suzannejmatthews.github.io/PDC-Unplugged/activities/byzantinegenerals/</guid>
      <description>Original Author/link Originally described by William S. Lloyd (Lloyd1994)
No web-link to independent description available. See paper (Lloyd1994) for additional details.
Details Students learn of the classic Byzantine Generals problem by acting out scenarios.
The Byzantine Generals problem is a classic description of the consensus problem in distributed computing, where many independent processes must agree on a &amp;ldquo;true&amp;rdquo; value for a particular measurement (especially in the case where some processes become unreliable due to faults).</description>
    </item>
    
    <item>
      <title>SweetenJuice</title>
      <link>http://suzannejmatthews.github.io/PDC-Unplugged/activities/sweetenjuice/</link>
      <pubDate>Thu, 07 Nov 2019 11:07:01 -0500</pubDate>
      
      <guid>http://suzannejmatthews.github.io/PDC-Unplugged/activities/sweetenjuice/</guid>
      <description>Original Author/link Originally described by Mordechai Ben-Ari and Yifat Ben-David Kolikant (Ben-Ari1999)
No web-link to independent description available. See paper (Ben-Ari1999) for additional details.
Details The paper uses dramatizations to help students understand algorithmic execution. The paper only describes one such lesson, which is used to introduce the concept of mutual exclusion. The following is a rough summar of the exercise in (Ben-Ari1999):
Two students volunteer to be robots. A drinking glass is placed at a visible point in the classroom, purporting to contain &amp;ldquo;juice&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>DesertIslandsAnalogy</title>
      <link>http://suzannejmatthews.github.io/PDC-Unplugged/activities/desertislandsanalogy/</link>
      <pubDate>Tue, 05 Nov 2019 15:34:13 -0500</pubDate>
      
      <guid>http://suzannejmatthews.github.io/PDC-Unplugged/activities/desertislandsanalogy/</guid>
      <description>Original Author/link Oklahoma Supercomputing Center for Educaton and Research (OSCER)
&amp;ldquo;Supercomputing in Plain English&amp;rdquo; - &amp;ldquo;Distributed Multiprocessing&amp;rdquo;, Slides 19-25.
 Available in: PPT and PDF Also described in (Neeman2006)  The following questions from (Neeman2006) can be used to stimulate discussion:
 Suppose that each student is on his or her own island far away from everyone else. Are any of them aware of anyone else? Do they know who is at the other end of the phone line?</description>
    </item>
    
    <item>
      <title>PenGame</title>
      <link>http://suzannejmatthews.github.io/PDC-Unplugged/activities/pengame/</link>
      <pubDate>Tue, 05 Nov 2019 14:30:34 -0500</pubDate>
      
      <guid>http://suzannejmatthews.github.io/PDC-Unplugged/activities/pengame/</guid>
      <description>Original Author/link Oklahoma Supercomputing Center for Educaton and Research (OSCER)
&amp;ldquo;Supercomputing in Plain English&amp;rdquo; - Shared Memory, Slides 103-104.
 Available in: PPT and PDF Also described in (Neeman2006)  After the first game (Take the Pen), students are asked &amp;ldquo;Can the outcome be predicted in advance?&amp;rdquo; They are led to the answer &amp;ldquo;no&amp;rdquo;, and to understand this is situation represents a race condition (Neeman2006).
The question is repeated after the second game (Look at the Pen).</description>
    </item>
    
    <item>
      <title>JigsawPuzzle</title>
      <link>http://suzannejmatthews.github.io/PDC-Unplugged/activities/jigsawpuzzle/</link>
      <pubDate>Mon, 04 Nov 2019 13:12:43 -0500</pubDate>
      
      <guid>http://suzannejmatthews.github.io/PDC-Unplugged/activities/jigsawpuzzle/</guid>
      <description>Original Author/link Oklahoma Supercomputing Center for Educaton and Research (OSCER)
&amp;ldquo;Supercomputing in Plain English&amp;rdquo; - Overview, Slides 45-52.
 Available in: PPT and PDF Also described in (Neeman2006)  Variations It is theoretically possible to &amp;ldquo;act out&amp;rdquo; the analogy by using an actual puzzle. However, the puzzle needs to be small enough to enable students to complete the puzzle in a reasonable amount of time. This variation is described in (Neeman2006):</description>
    </item>
    
    <item>
      <title>SieveOfErastothenes</title>
      <link>http://suzannejmatthews.github.io/PDC-Unplugged/activities/sieveoferastothenes/</link>
      <pubDate>Mon, 04 Nov 2019 10:56:26 -0500</pubDate>
      
      <guid>http://suzannejmatthews.github.io/PDC-Unplugged/activities/sieveoferastothenes/</guid>
      <description>Original Author/link Originally described by Gregory F. Bachelis, David A. James, Bruce R. Maxim and Quentin F. Stout (Maxim1990, Bachelis1994). Also described by Michelle Moore (Moore2000) and (Kitchen1992).
No web-link to independent description available. See papers (Bachelis1994, Moore2000) for additional details.
Other activities by authors (Bachelis1994): ParallelAddition, FindSmallestCard, OddEvenTranspositionSort
(Moore2000): CardSorting, OddEvenTranspositionSort, MatrixAddition
Details Suppose the goal is to find all the primes less than n = 1,000. In the serial case, all the numbers from 2 .</description>
    </item>
    
    <item>
      <title>MatrixAddition</title>
      <link>http://suzannejmatthews.github.io/PDC-Unplugged/activities/matrixaddition/</link>
      <pubDate>Mon, 04 Nov 2019 09:38:59 -0500</pubDate>
      
      <guid>http://suzannejmatthews.github.io/PDC-Unplugged/activities/matrixaddition/</guid>
      <description>Original Author/link Originally Described by Michelle Moore (Moore2000). In a separate paper (Kitchen1992), the notion of adding numbers in a matrix to illustrate master/worker is alluded to, but not discussed in depth.
No web-link to independent description available. See paper (Moore2000) for additional details.
Other activities by author (Moore2000): SieveOfErastothenes, OddEvenTranspositionSort, CardSorting
Details Moore describes how to use Matrix Addition to describe the differences between shared memory vs distributed memory systems.</description>
    </item>
    
    <item>
      <title>CompanyAnalogy</title>
      <link>http://suzannejmatthews.github.io/PDC-Unplugged/activities/companyanalogy/</link>
      <pubDate>Fri, 01 Nov 2019 17:02:44 -0400</pubDate>
      
      <guid>http://suzannejmatthews.github.io/PDC-Unplugged/activities/companyanalogy/</guid>
      <description>Original Author/link Originally described by Nasser Giacaman (Giacaman2012).
No web-link to independent description available. See paper (Giacaman2012) for details.
Details The company analogy is used to introduce multicore systems:
 The processor is a &amp;ldquo;company&amp;rdquo; with &amp;ldquo;desks&amp;rdquo; representing multiple cores. Students (&amp;ldquo;employees&amp;rdquo;) are assigned/hired to sit at a desk to do work, representing threads (or processes). Work is written on &amp;ldquo;job cards&amp;rdquo; and represent tasks/runnables to be executed.
  To illustrate (under)utilization and resource contention/context switching:</description>
    </item>
    
    <item>
      <title>PBJinParallel</title>
      <link>http://suzannejmatthews.github.io/PDC-Unplugged/activities/pbjinparallel/</link>
      <pubDate>Fri, 01 Nov 2019 16:19:09 -0400</pubDate>
      
      <guid>http://suzannejmatthews.github.io/PDC-Unplugged/activities/pbjinparallel/</guid>
      <description>Original Author/link iPDC Modules
 Available in Word and PDF  CS2013 Knowledge Unit Coverage Communication and Coordination (Core Tier 1) 2. Core Tier 1: Give an example of an ordering of accesses among concurrent activities (e.g., program with a data race) that is not sequentially consistent. [Familiarity]
TCPP Topics Coverage Programming Topics  Comprehend Deadlocks: Understand what a deadlock is, and methods for detecting and preventing them
 Know Data Races: Know what a data race is, and how to use synchronization to prevent it.</description>
    </item>
    
    <item>
      <title>CandySorting</title>
      <link>http://suzannejmatthews.github.io/PDC-Unplugged/activities/candysorting/</link>
      <pubDate>Fri, 01 Nov 2019 14:23:28 -0400</pubDate>
      
      <guid>http://suzannejmatthews.github.io/PDC-Unplugged/activities/candysorting/</guid>
      <description>Original Author/link iPDC Modules
 Available in Word and PDF  CS2013 Knowledge Unit Coverage Parallel Decomposition (Core Tier 1, Core Tier 2) 1. Core Tier 1: Explain why synchronization is necessary in a specific parallel program. [Usage]
2. Core Tier 1: Identify opportunities to partition a serial program into independent parallel modules. [Familiarity]
4. Core Tier 2: Parallelize an algorithm by applying task-based decomposition. [Usage]
Parallel Performance (Elective) 1.</description>
    </item>
    
    <item>
      <title>ArraysinParallel</title>
      <link>http://suzannejmatthews.github.io/PDC-Unplugged/activities/arraysinparallel/</link>
      <pubDate>Fri, 01 Nov 2019 11:58:18 -0400</pubDate>
      
      <guid>http://suzannejmatthews.github.io/PDC-Unplugged/activities/arraysinparallel/</guid>
      <description>Original Author/link iPDC Modules
 Available in Word and PDF  CS2013 Knowledge Unit Coverage PD/Parallel Decomposition Core Tier1, Core Tier2 2. Core Tier 1:Identify opportunities to partition a serial program into independent parallel modules. [Familiarity]
5.\ Core Tier 2:Parallelize an algorithm by applying data-parallel decomposition. [Usage]
TCPP Coverage Programming Topics  Apply Data parallel: Be able to write a correct data parallel program for shared-memory machines and get speedup, should do an exercise.</description>
    </item>
    
    <item>
      <title>OrangeGame</title>
      <link>http://suzannejmatthews.github.io/PDC-Unplugged/activities/orangegame/</link>
      <pubDate>Fri, 01 Nov 2019 10:59:45 -0400</pubDate>
      
      <guid>http://suzannejmatthews.github.io/PDC-Unplugged/activities/orangegame/</guid>
      <description>Original Author/link CSUnplugged.Org
CS2013 Knowledge Unit Coverage PD/Communication and Coordination Core Tier 2  Give an example of a scenario in which blocking message sends can deadlock. [Usage]  TCPP Coverage Programming Topics  Comprehend Deadlocks: Understand what a deadlock is, and methods for detecting and preventing them  Recommended Courses  K-12: CSUnplugged recommends this as a K-12 activity Systems/OS: The activity can also be used to introduce the concepts of concurrency and deadlock in undergraduate courses.</description>
    </item>
    
  </channel>
</rss>