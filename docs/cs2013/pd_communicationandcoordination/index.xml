<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PD_CommunicationAndCoordination on PDC Unplugged</title>
    <link>https://www.pdcunplugged.org/cs2013/pd_communicationandcoordination/</link>
    <description>Recent content in PD_CommunicationAndCoordination on PDC Unplugged</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Jan 2020 15:20:31 -0500</lastBuildDate>
    
	<atom:link href="https://www.pdcunplugged.org/cs2013/pd_communicationandcoordination/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SurvivorAnalogy</title>
      <link>https://www.pdcunplugged.org/activities/survivoranalogy/</link>
      <pubDate>Wed, 08 Jan 2020 15:20:31 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/survivoranalogy/</guid>
      <description>Original Author/link Originally described by Steve Bogaerts (Bogaerts2014).
No link to independent description publicly available. See &amp;ldquo;Details&amp;rdquo; section for more details:
 Details This analogy is used to explain the mechanism of locks. While (Bogaerts2014) specifically references the book The Lord of the Flies, not everyone may be familiar with that book (and some who are already familiar may not want to be reminded of it). Instead, it may be useful to explain the following general scenario:</description>
    </item>
    
    <item>
      <title>ArrayAddition</title>
      <link>https://www.pdcunplugged.org/activities/arrayaddition/</link>
      <pubDate>Tue, 07 Jan 2020 15:13:49 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/arrayaddition/</guid>
      <description>Original Author/link Originally described by Robert Chesebrough and Ivan Turner; the authors cite the 2nd chapter of James Reinders&amp;rsquo; book (see citations) as inspiration for this example.
No link to indepdendent description available. Please see Details section for more information.
 Details Students sitting at desks represent &amp;ldquo;threads&amp;rdquo; on individual cores. Each student has a piece of paper on their desk representing local memory. Prior to the activity, the instructor writes an array on the board, filled with random values (limit 1 through 10 for ease of addition), with indices written underneath.</description>
    </item>
    
    <item>
      <title>ParallelGarbageCollection</title>
      <link>https://www.pdcunplugged.org/activities/parallelgarbagecollection/</link>
      <pubDate>Mon, 06 Jan 2020 14:36:44 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/parallelgarbagecollection/</guid>
      <description>Original Author/link Originally described by Paulo A.G. Sivilotti and Scott Pike
Paper and poster available online:
 Details See paper for details. In summary, this activity presents a directed graph with a distinguished vertex (labeled the root). Vertices are connected to each other with some number of edges. The end-goal is determine the set of reachable vertices from the root (&amp;ldquo;food&amp;rdquo;) and distinguish them from the set of non-reachable vertices (&amp;ldquo;garbage&amp;rdquo;).</description>
    </item>
    
    <item>
      <title>ConcertTickets</title>
      <link>https://www.pdcunplugged.org/activities/concerttickets/</link>
      <pubDate>Fri, 06 Dec 2019 17:54:13 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/concerttickets/</guid>
      <description>Original Author/link Originally described by Yifat Ben-David Kolikant (Kolinkat2001). Modified for a CS1 audience by Gary Lewandowski, Dennis Bouvier, Robert McCartney, Kate Sanders, and Beth Simon in 2007 (Lewandowski2007, Lewandowski2010)
No on-line resources available. See details for description.
 Details CS1 Use-Case The following scenario is presented to students entering CS1 on their first day (Lewandowski2010):
 Suppose a Ticket Sale Company sells concert tickets in the following way: When a customer calls and asks for a n seats, the seller (1) finds the n best available seats; (2) marks those n seats as unavailable; and (3) deals with customer payment options and either e-mails ticket receipt or sends tickets to the Will Call Box Office (lets customer pick up tickets day of show).</description>
    </item>
    
    <item>
      <title>FaultTolerantTokenRing</title>
      <link>https://www.pdcunplugged.org/activities/faulttoleranttokenring/</link>
      <pubDate>Thu, 14 Nov 2019 12:37:23 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/faulttoleranttokenring/</guid>
      <description>Original Author/link Originally described by Paolo A.G. Sivilotti and Murat Demirbas (Sivilotti2003) to illustrate Dijkstra&amp;rsquo;s stabalizing token ring algorithm.
Paper and materials available online:
 Middle School Slides (includes other activities) PPT High School Slides PPT 1 Page Synopsis PDF Token ring algorithm handout PDF   CS2013 Knowledge Unit Coverage Communication and Coordination  Use mutual exclusion to avoid a given race condition. [Usage]   TCPP Topics Coverage Algorithms Topics  Comprehend/Apply Communication: Understand &amp;mdash; via hands-on experience &amp;mdash; that inter-processor communication is one of the most challenging aspects of PDC.</description>
    </item>
    
    <item>
      <title>SweetenJuice</title>
      <link>https://www.pdcunplugged.org/activities/sweetenjuice/</link>
      <pubDate>Thu, 07 Nov 2019 11:07:01 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/sweetenjuice/</guid>
      <description>Original Author/link Originally described by Mordechai Ben-Ari and Yifat Ben-David Kolikant (Ben-Ari1999)
No web-link to independent description available. See paper (Ben-Ari1999) for additional details.
 Details The paper uses dramatizations to help students understand algorithmic execution. The paper only describes one such lesson, which is used to introduce the concept of mutual exclusion. The following is a rough summary of the exercise in (Ben-Ari1999):
Two students volunteer to be robots. A drinking glass is placed at a visible point in the classroom, purporting to contain &amp;ldquo;juice&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>PenGame</title>
      <link>https://www.pdcunplugged.org/activities/pengame/</link>
      <pubDate>Tue, 05 Nov 2019 14:30:34 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/pengame/</guid>
      <description>Original Author/link Oklahoma Supercomputing Center for Educaton and Research (OSCER)
&amp;ldquo;Supercomputing in Plain English&amp;rdquo; - Shared Memory, Slides 103-104.
 Available in: PPT and PDF Also described in (Neeman2006)  After the first game (Take the Pen), students are asked &amp;ldquo;Can the outcome be predicted in advance?&amp;rdquo; They are led to the answer &amp;ldquo;no&amp;rdquo;, and to understand this is situation represents a race condition (Neeman2006).
The question is repeated after the second game (Look at the Pen).</description>
    </item>
    
    <item>
      <title>PBJinParallel</title>
      <link>https://www.pdcunplugged.org/activities/pbjinparallel/</link>
      <pubDate>Fri, 01 Nov 2019 16:19:09 -0400</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/pbjinparallel/</guid>
      <description>Original Author/link Note: The &amp;ldquo;Make a Peanut Butter and Jelly Sandwich&amp;rdquo; serial exercise is an extremely old way to describe how a computer executes a set of instructions. The earliest known description is the &amp;ldquo;Great Peanut Butter Caper&amp;rdquo; by Lewandowski and Morehead in 1998. A variation was presented by Davis and Rebelsky in 2007. Unlike the original described exercises, this activity explores how to put together a Peanut Butter and Jelly sandwich in parallel</description>
    </item>
    
    <item>
      <title>OrangeGame</title>
      <link>https://www.pdcunplugged.org/activities/orangegame/</link>
      <pubDate>Fri, 01 Nov 2019 10:59:45 -0400</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/orangegame/</guid>
      <description>Original Author/link CSUnplugged.Org
CS2013 Knowledge Unit Coverage PD/Communication and Coordination Core Tier 2 Give an example of a scenario in which blocking message sends can deadlock. [Usage]  TCPP Coverage Programming Topics  Comprehend Deadlocks: Understand what a deadlock is, and methods for detecting and preventing them  Recommended Courses  K-12: CSUnplugged recommends this as a K-12 activity Systems/OS: The activity can also be used to introduce the concepts of concurrency and deadlock in undergraduate courses.</description>
    </item>
    
  </channel>
</rss>