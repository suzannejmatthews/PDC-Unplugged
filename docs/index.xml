<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PDC Unplugged</title>
    <link>https://www.pdcunplugged.org/</link>
    <description>Recent content on PDC Unplugged</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Jan 2020 16:20:50 -0500</lastBuildDate>
    
	<atom:link href="https://www.pdcunplugged.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MessagePassingAcrobats</title>
      <link>https://www.pdcunplugged.org/activities/messagepassingacrobats/</link>
      <pubDate>Wed, 08 Jan 2020 16:20:50 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/messagepassingacrobats/</guid>
      <description>Original Author/link Originally described by Steven K. Andrianoff and David B. Levine
No link to independent description available. See &amp;ldquo;Details&amp;rdquo; for more details.
 Details The instructor plays the role of the main program, and students play the role of one or more acrobats.
  The instructor chooses a few student volunteers to be &amp;ldquo;acrobats&amp;rdquo;. It is very important that the instructor knows the names of the students (and that they have different names).</description>
    </item>
    
    <item>
      <title>FlowerJoinAnalogy</title>
      <link>https://www.pdcunplugged.org/activities/flowerjoinanalogy/</link>
      <pubDate>Wed, 08 Jan 2020 16:01:45 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/flowerjoinanalogy/</guid>
      <description>Original Author/link Originally described by Steve Bogaerts (Bogaerts2014).
No link to independent description publicly available. See &amp;ldquo;Details&amp;rdquo; section for more details:
 Details Bogaerts used this analogy to explain the notion of thread join operation. Suppose a parent and their child are out for a walk along a trail in their local park. The child decides to travel off the path to pick flowers. While the parent can go on for some time without the child, eventually they will call out to the child to catch up: &amp;ldquo;Come now, please join me up here&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>SurvivorAnalogy</title>
      <link>https://www.pdcunplugged.org/activities/survivoranalogy/</link>
      <pubDate>Wed, 08 Jan 2020 15:20:31 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/survivoranalogy/</guid>
      <description>Original Author/link Originally described by Steve Bogaerts (Bogaerts2014).
No link to independent description publicly available. See &amp;ldquo;Details&amp;rdquo; section for more details:
 Details This analogy is used to explain the mechanism of locks. While (Bogaerts2014) specifically references the book The Lord of the Flies, not everyone may be familiar with that book (and some who are already familiar may not want to be reminded of it). Instead, it may be useful to explain the following general scenario:</description>
    </item>
    
    <item>
      <title>BuildingCommunicationAnalogy</title>
      <link>https://www.pdcunplugged.org/activities/buildingcommunicationanalogy/</link>
      <pubDate>Wed, 08 Jan 2020 14:38:16 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/buildingcommunicationanalogy/</guid>
      <description>Original Author/link Originally described Steven Bogaerts.
No link to independent description. See Details section for more details.
 Details This analogy is used to describe different types of inter-process communication. The scenario is as follows: suppose that you and a friend are trying to count the number of people in a building. How can this be accomplished? Here are three different things you may say to your friend (from Bogaerts2014):</description>
    </item>
    
    <item>
      <title>PlantingTrees</title>
      <link>https://www.pdcunplugged.org/activities/plantingtrees/</link>
      <pubDate>Wed, 08 Jan 2020 11:16:31 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/plantingtrees/</guid>
      <description>Original Author/link Described by Yifat Ben-David Kolikant (Kolinkat2001). Two introduction questions presented by Steven Bogaerts as part of his &amp;ldquo;real-life analogies&amp;rdquo; (Bogaerts2014, Bogaerts2017).
No public description avaialable. See Details section for more information.
 Details Start with some generals questions from Steven Bogaerts:
 &amp;ldquo;If I can shovel my driveway in 1 hour, how long would you expect it to take if someone equally capable were to help me?&amp;rdquo;
  &amp;ldquo;If one person can dig a hole with a shovel in 100 seconds, how long will it take for 10 people to dig that hole?</description>
    </item>
    
    <item>
      <title>ArrayAddition</title>
      <link>https://www.pdcunplugged.org/activities/arrayaddition/</link>
      <pubDate>Tue, 07 Jan 2020 15:13:49 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/arrayaddition/</guid>
      <description>Original Author/link Originally described by Robert Chesebrough and Ivan Turner; the authors cite the 2nd chapter of James Reinders&amp;rsquo; book (see citations) as inspiration for this example.
No link to indepdendent description available. Please see Details section for more information.
 Details Students sitting at desks represent &amp;ldquo;threads&amp;rdquo; on individual cores. Each student has a piece of paper on their desk representing local memory. Prior to the activity, the instructor writes an array on the board, filled with random values (limit 1 through 10 for ease of addition), with indices written underneath.</description>
    </item>
    
    <item>
      <title>StuffingEnvelopes</title>
      <link>https://www.pdcunplugged.org/activities/stuffingenvelopes/</link>
      <pubDate>Tue, 07 Jan 2020 14:10:46 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/stuffingenvelopes/</guid>
      <description>Original Author/link Originally described by Robert Chesebrough and Ivan Turner; the authors cite the 2nd chapter of James Reinders&amp;rsquo; book (see citations) as inspiration for this example.
No link to indepdendent description available. Please see Details section for more information.
 Details Prior to the activity, students should be assigned to teams of four. The goal is to discuss different strategies for completing the stack of preparing letters for mailing. In doing the activity, students learn about domain (data) decomposition vs task decomposition.</description>
    </item>
    
    <item>
      <title>KitchenAnalogy</title>
      <link>https://www.pdcunplugged.org/activities/kitchenanalogy/</link>
      <pubDate>Tue, 07 Jan 2020 08:40:19 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/kitchenanalogy/</guid>
      <description>Original Author/link The kitchen analogy is a fairly well-known analogy for discussing the memory hierarchy. I am not sure who first described it. If someone knows, please contact me so I can attribute correctly
There are several on-line write-ups about the Kitchen Analogy. We specifically link to a series of blog-posts on the Kitchen Analogy that were posted on the Intel Developers Site in 2015, as it is one of the most well-developed write-ups of the analogy that I have seen thus far:</description>
    </item>
    
    <item>
      <title>StabalizingLeaderElection</title>
      <link>https://www.pdcunplugged.org/activities/stabalizingleaderelection/</link>
      <pubDate>Mon, 06 Jan 2020 16:15:10 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/stabalizingleaderelection/</guid>
      <description>Original Author/link Originally described by Paulo A.G. Sivilotti and Scott Pike
Paper available online:
 Details See paper for full details. This activity demonstrates how an algorithm can recover from data corruption. The students in this activity represent processes in an undirected connected graph. Each process has a unique identifier. The goal is to identify the process with the highest identifier. While the process identifiers themselves are not corruptible, the model assumes that transient faults may occur that can corrupt data values associated with the process.</description>
    </item>
    
    <item>
      <title>ParallelGarbageCollection</title>
      <link>https://www.pdcunplugged.org/activities/parallelgarbagecollection/</link>
      <pubDate>Mon, 06 Jan 2020 14:36:44 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/parallelgarbagecollection/</guid>
      <description>Original Author/link Originally described by Paulo A.G. Sivilotti and Scott Pike
Paper and poster available online:
 Details See paper for details. In summary, this activity presents a directed graph with a distinguished vertex (labeled the root). Vertices are connected to each other with some number of edges. The end-goal is determine the set of reachable vertices from the root (&amp;ldquo;food&amp;rdquo;) and distinguish them from the set of non-reachable vertices (&amp;ldquo;garbage&amp;rdquo;).</description>
    </item>
    
    <item>
      <title>NondeterministicSorting</title>
      <link>https://www.pdcunplugged.org/activities/nondeterministicsorting/</link>
      <pubDate>Mon, 06 Jan 2020 13:39:13 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/nondeterministicsorting/</guid>
      <description>Original Author/link Originally described by Paulo A.G. Sivilotti and Scott Pike
Paper and poster available online:
 Details See paper and poster for full details. A high level summary is provided below:
  A group of students are chosen to represent elements in an array. Each student is given a sign/sticker that indicates their position in the array. Each student is also given an index card with a random integer value on it.</description>
    </item>
    
    <item>
      <title>CoinFlip</title>
      <link>https://www.pdcunplugged.org/activities/coinflip/</link>
      <pubDate>Wed, 11 Dec 2019 15:00:06 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/coinflip/</guid>
      <description>Original Author/link Originally described by Andrew Kitchen, Nan Schaller and Paul Tyman (Kitchen1992).
No link to independent description available. See Details for a synopsis.
 Details The goal of this activity is to help students visualize the difference between execution on a SIMD architecture vs a MIMD architecture. Each student plays a processor and is given a coin.
They are presented with the following algorithm:
1. flip coin. 2. check if heads.</description>
    </item>
    
    <item>
      <title>PipelineSort</title>
      <link>https://www.pdcunplugged.org/activities/pipelinesort/</link>
      <pubDate>Wed, 11 Dec 2019 12:38:56 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/pipelinesort/</guid>
      <description>Original Author/link Originally described by Gregory F. Bachelis, David A. James, Bruce R. Maxim and Quentin F. Stout (Bachelis1994). It was also mentioned in (Kitche1992), but (Maxim1990) is listed as a reference.
No link to independent description publicly available. Please see details section for a synopsis.
Similiar Exercises: Sorting: OddEvenTranspositionSort, ParallelRadixSort, CardSorting, SortingNetwork
Other activities by authors (Bachelis1994): ParallelAddition, FindSmallestCard, SieveOfErastothenes, OddEvenTranspositionSort, CardSorting
 Details From (Bachelis1994): The goal of this exercise is to illustrate how sorting can occur in a stream/pipeline.</description>
    </item>
    
    <item>
      <title>AddLargeNumbers</title>
      <link>https://www.pdcunplugged.org/activities/addlargenumbers/</link>
      <pubDate>Wed, 11 Dec 2019 10:46:11 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/addlargenumbers/</guid>
      <description>Original Author/link Originally described by Gregory F. Bachelis, David A. James, Bruce R. Maxim and Quentin F. Stout (Bachelis1994)
No link to independent description publicly available. Please see details section for a synopsis.
Other activities by authors (Bachelis1994): FindSmallestCard, CardSorting, OddEvenTranspositionSort, SieveOfErastothenes, ParallelAddition
 Details From (Bachelis1994): The goal is to introduce students to how large pairs of numbers in parallel.
Suppose the goal is to add two large numbers (in this example, 534,789,213 and 495,378,388).</description>
    </item>
    
    <item>
      <title>ParallelAddition</title>
      <link>https://www.pdcunplugged.org/activities/paralleladdition/</link>
      <pubDate>Mon, 09 Dec 2019 15:43:45 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/paralleladdition/</guid>
      <description>Original Author/link Originally described by Gregory F. Bachelis, David A. James, Bruce R. Maxim and Quentin F. Stout (Bachelis1994)
No link to independent description publicly available. Please see details section for a synopsis.
Other activities by authors (Bachelis1994): FindSmallestCard, CardSorting, OddEvenTranspositionSort, SieveOfErastothenes, AddLargeNumbers
 Details From (Bachelis1994): The goal is to add a series of 16 random numbers. Each student is given a piece of paper (representing local memory) that only they have access to.</description>
    </item>
    
    <item>
      <title>FindSmallestCard</title>
      <link>https://www.pdcunplugged.org/activities/findsmallestcard/</link>
      <pubDate>Mon, 09 Dec 2019 14:34:15 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/findsmallestcard/</guid>
      <description>Original Author/link Originally described by Gregory F. Bachelis, David A. James, Bruce R. Maxim and Quentin F. Stout (Bachelis1994)
No link to independent description publicly available. Please see details section for a synopsis.
Similar Activites FindOldestPenny, FindYoungestStudent
Other activities by authors (Bachelis1994): ParallelAddition. CardSorting, OddEvenTranspositionSort, SieveOfErastothenes
 Details From (Bachelis1994): The goal is to find the smallest card (e.g. lowest value card) in a collection of 16 cards. The notion of a &amp;ldquo;two-card comparator&amp;rdquo; is discussed as part of the process (e.</description>
    </item>
    
    <item>
      <title>ConcertTickets</title>
      <link>https://www.pdcunplugged.org/activities/concerttickets/</link>
      <pubDate>Fri, 06 Dec 2019 17:54:13 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/concerttickets/</guid>
      <description>Original Author/link Originally described by Yifat Ben-David Kolikant (Kolinkat2001). Modified for a CS1 audience by Gary Lewandowski, Dennis Bouvier, Robert McCartney, Kate Sanders, and Beth Simon in 2007 (Lewandowski2007, Lewandowski2010)
No on-line resources available. See details for description.
 Details CS1 Use-Case The following scenario is presented to students entering CS1 on their first day (Lewandowski2010):
 Suppose a Ticket Sale Company sells concert tickets in the following way: When a customer calls and asks for a n seats, the seller (1) finds the n best available seats; (2) marks those n seats as unavailable; and (3) deals with customer payment options and either e-mails ticket receipt or sends tickets to the Will Call Box Office (lets customer pick up tickets day of show).</description>
    </item>
    
    <item>
      <title>MoreProcessorsNotAlwaysBetter</title>
      <link>https://www.pdcunplugged.org/activities/moreprocessorsnotalwaysbetter/</link>
      <pubDate>Fri, 06 Dec 2019 14:17:02 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/moreprocessorsnotalwaysbetter/</guid>
      <description>Original Author/link This activity was originally proposed by Mary Smith and Srishti Srivastava.
Paper (Srivastava2019) and slides available on-line.
 Details See paper for details. In summary, the goal is to write the statement &amp;ldquo;More Processors Are Not Always The Best&amp;rdquo;, along with the indices of each letter.
  Sequential phase. In the sequential phase, a single student is instructed to first write the statement show above (task 1) and then write the index associated with each letter (0 .</description>
    </item>
    
    <item>
      <title>FindOldestPenny</title>
      <link>https://www.pdcunplugged.org/activities/findoldestpenny/</link>
      <pubDate>Fri, 06 Dec 2019 13:09:20 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/findoldestpenny/</guid>
      <description>Original Author/link This activity was originally proposed by Mary Smith and Srishti Srivastava, with consultation from Brett A Becker.
Paper (Srivastava2019) and slides available on-line.
Similar Activities FindSmallestCard, FindYoungestStudent
 Details See paper for details. In summary, the goal is to find the oldest penny in a pile of pennies. This is first done sequentially, with one student trying to determine the oldest penny in a group of 50 pennies. Next, two students are employed, with each student getting a bag of 25 pennies.</description>
    </item>
    
    <item>
      <title>FaultTolerantTokenRing</title>
      <link>https://www.pdcunplugged.org/activities/faulttoleranttokenring/</link>
      <pubDate>Thu, 14 Nov 2019 12:37:23 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/faulttoleranttokenring/</guid>
      <description>Original Author/link Originally described by Paolo A.G. Sivilotti and Murat Demirbas (Sivilotti2003) to illustrate Dijkstra&amp;rsquo;s stabalizing token ring algorithm.
Paper and materials available online:
 Middle School Slides (includes other activities) PPT High School Slides PPT 1 Page Synopsis PDF Token ring algorithm handout PDF   CS2013 Knowledge Unit Coverage Communication and Coordination  Use mutual exclusion to avoid a given race condition. [Usage]   TCPP Topics Coverage Algorithms Topics  Comprehend/Apply Communication: Understand &amp;mdash; via hands-on experience &amp;mdash; that inter-processor communication is one of the most challenging aspects of PDC.</description>
    </item>
    
    <item>
      <title>ParallelRadixSort</title>
      <link>https://www.pdcunplugged.org/activities/parallelradixsort/</link>
      <pubDate>Thu, 14 Nov 2019 10:30:47 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/parallelradixsort/</guid>
      <description>Original Author/link Originally Described by Adam Rifkin (1994). No web-link to independent description available. However, (Sivilotti2003) employed the exercise in a summer workshop for middle school girls, and provided a write-up of the activity and slides associated with the activity at his website
 Slides (includes other activities) PPT 1 Page Synopsis PDF  See papers (Rifkin1994, Sivilotti2003) for additional details.
Similar Exercises: Sorting: oddEvenTranspositionSort, sortingNetwork, cardsorting
Other activities by (Rifki1994, Sivilotti2003) Rifkin1994: oddEvenTranspositionSort</description>
    </item>
    
    <item>
      <title>ByzantineGenerals</title>
      <link>https://www.pdcunplugged.org/activities/byzantinegenerals/</link>
      <pubDate>Wed, 13 Nov 2019 14:02:06 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/byzantinegenerals/</guid>
      <description>Original Author/link Originally described by William S. Lloyd (Lloyd1994)
No web-link to independent description available. See paper (Lloyd1994) for additional details.
 Details Students learn of the classic Byzantine Generals problem by acting out scenarios.
The Byzantine Generals problem is a classic description of the consensus problem in distributed computing, where many independent processes must agree on a &amp;ldquo;true&amp;rdquo; value for a particular measurement (especially in the case where some processes become unreliable due to faults).</description>
    </item>
    
    <item>
      <title>SweetenJuice</title>
      <link>https://www.pdcunplugged.org/activities/sweetenjuice/</link>
      <pubDate>Thu, 07 Nov 2019 11:07:01 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/sweetenjuice/</guid>
      <description>Original Author/link Originally described by Mordechai Ben-Ari and Yifat Ben-David Kolikant (Ben-Ari1999)
No web-link to independent description available. See paper (Ben-Ari1999) for additional details.
 Details The paper uses dramatizations to help students understand algorithmic execution. The paper only describes one such lesson, which is used to introduce the concept of mutual exclusion. The following is a rough summary of the exercise in (Ben-Ari1999):
Two students volunteer to be robots. A drinking glass is placed at a visible point in the classroom, purporting to contain &amp;ldquo;juice&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>LongDistancePhoneCall</title>
      <link>https://www.pdcunplugged.org/activities/longdistancephonecall/</link>
      <pubDate>Tue, 05 Nov 2019 17:46:25 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/longdistancephonecall/</guid>
      <description>Original Author/link Oklahoma Supercomputing Center for Educaton and Research (OSCER)
&amp;ldquo;Supercomputing in Plain English&amp;rdquo; - &amp;ldquo;Distributed Multiprocessing&amp;rdquo;, Slide 26.
 Available in: PPT and PDF Also described in (Neeman2006)   CS2013 Knowledge Unit Coverage Parallel Architecture (Elective) 8. Describe the key performance challenges in different memory and distributed system topologies. [Familiarity]
 TCPP Topics Coverage Architecture Topics   Know Message passing (no shared memory) Latency: Know the concept, implications for scaling, impact on work/communication ratio to achieve speedup.</description>
    </item>
    
    <item>
      <title>DesertIslandsAnalogy</title>
      <link>https://www.pdcunplugged.org/activities/desertislandsanalogy/</link>
      <pubDate>Tue, 05 Nov 2019 15:34:13 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/desertislandsanalogy/</guid>
      <description>Original Author/link Oklahoma Supercomputing Center for Educaton and Research (OSCER)
&amp;ldquo;Supercomputing in Plain English&amp;rdquo; - &amp;ldquo;Distributed Multiprocessing&amp;rdquo;, Slides 19-25.
 Available in: PPT and PDF Also described in (Neeman2006)  The following questions from (Neeman2006) can be used to stimulate discussion:
 Suppose that each student is on his or her own island far away from everyone else. Are any of them aware of anyone else? Do they know who is at the other end of the phone line?</description>
    </item>
    
    <item>
      <title>PenGame</title>
      <link>https://www.pdcunplugged.org/activities/pengame/</link>
      <pubDate>Tue, 05 Nov 2019 14:30:34 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/pengame/</guid>
      <description>Original Author/link Oklahoma Supercomputing Center for Educaton and Research (OSCER)
&amp;ldquo;Supercomputing in Plain English&amp;rdquo; - Shared Memory, Slides 103-104.
 Available in: PPT and PDF Also described in (Neeman2006)  After the first game (Take the Pen), students are asked &amp;ldquo;Can the outcome be predicted in advance?&amp;rdquo; They are led to the answer &amp;ldquo;no&amp;rdquo;, and to understand this is situation represents a race condition (Neeman2006).
The question is repeated after the second game (Look at the Pen).</description>
    </item>
    
    <item>
      <title>JigsawPuzzle</title>
      <link>https://www.pdcunplugged.org/activities/jigsawpuzzle/</link>
      <pubDate>Mon, 04 Nov 2019 13:12:43 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/jigsawpuzzle/</guid>
      <description>Original Author/link Oklahoma Supercomputing Center for Educaton and Research (OSCER)
&amp;ldquo;Supercomputing in Plain English&amp;rdquo; - Overview, Slides 45-52.
 Available in: PPT and PDF Also described in (Neeman2006)   Variations It is theoretically possible to &amp;ldquo;act out&amp;rdquo; the analogy by using an actual puzzle. However, the puzzle needs to be small enough to enable students to complete the puzzle in a reasonable amount of time. This variation is described in (Neeman2006):</description>
    </item>
    
    <item>
      <title>SieveOfErastothenes</title>
      <link>https://www.pdcunplugged.org/activities/sieveoferastothenes/</link>
      <pubDate>Mon, 04 Nov 2019 10:56:26 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/sieveoferastothenes/</guid>
      <description>Original Author/link Originally described by Gregory F. Bachelis, David A. James, Bruce R. Maxim and Quentin F. Stout (Maxim1990, Bachelis1994). Also described by Michelle Moore (Moore2000) and (Kitchen1992).
No web-link to independent description available. See papers (Bachelis1994, Moore2000) for additional details.
Other activities by authors (Bachelis1994): ParallelAddition, FindSmallestCard, OddEvenTranspositionSort
(Moore2000): CardSorting, OddEvenTranspositionSort, MatrixAddition
 Details Suppose the goal is to find all the primes less than n = 1,000. In the serial case, all the numbers from 2 .</description>
    </item>
    
    <item>
      <title>MatrixAddition</title>
      <link>https://www.pdcunplugged.org/activities/matrixaddition/</link>
      <pubDate>Mon, 04 Nov 2019 09:38:59 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/matrixaddition/</guid>
      <description>Original Author/link Originally Described by Michelle Moore (Moore2000). In a separate paper (Kitchen1992), the notion of adding numbers in a matrix to illustrate master/worker is alluded to, but not discussed in depth.
No web-link to independent description available. See paper (Moore2000) for additional details.
Other activities by author (Moore2000): SieveOfErastothenes, OddEvenTranspositionSort, CardSorting
 Details Moore describes how to use Matrix Addition to describe the differences between shared memory vs distributed memory systems.</description>
    </item>
    
    <item>
      <title>OddEvenTranspositionSort</title>
      <link>https://www.pdcunplugged.org/activities/oddeventranspositionsort/</link>
      <pubDate>Mon, 04 Nov 2019 08:25:13 -0500</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/oddeventranspositionsort/</guid>
      <description>Original Author/link Originally Described by Adam Rifkin (Rifkin1994), with a separate description by Michelle Moore (Moore2000). (Bachelis1994) also presents the sort as a &amp;ldquo;compare-exchange sort&amp;rdquo;. We extrapolate on (Rifkin1994), since it is well described.
No web-link to independent description available. However, (Sivilotti2003) employed the exercise in a summer workshop for middle school girls, and provided a write-up of the activity and slides associated with the activity at his website:
 Slides (includes other activities) PPT 1 Page Synopsis PDF  See papers (Rifkin1994, Bachelis1994, Moore2000, Sivilotti2003) for additional details.</description>
    </item>
    
    <item>
      <title>CompanyAnalogy</title>
      <link>https://www.pdcunplugged.org/activities/companyanalogy/</link>
      <pubDate>Fri, 01 Nov 2019 17:02:44 -0400</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/companyanalogy/</guid>
      <description>Original Author/link Originally described by Nasser Giacaman (Giacaman2012). General Question presented by Steve Bogaerts (Bogaerts2014).
No web-link to independent description available. See paper (Giacaman2012) for details.
 Details The company analogy is used to introduce multicore systems:
 The processor is a &amp;ldquo;company&amp;rdquo; with &amp;ldquo;desks&amp;rdquo; representing multiple cores. Students (&amp;ldquo;employees&amp;rdquo;) are assigned/hired to sit at a desk to do work, representing threads (or processes). Work is written on &amp;ldquo;job cards&amp;rdquo; and represent tasks/runnables to be executed.</description>
    </item>
    
    <item>
      <title>PBJinParallel</title>
      <link>https://www.pdcunplugged.org/activities/pbjinparallel/</link>
      <pubDate>Fri, 01 Nov 2019 16:19:09 -0400</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/pbjinparallel/</guid>
      <description>Original Author/link Note: The &amp;ldquo;Make a Peanut Butter and Jelly Sandwich&amp;rdquo; serial exercise is an extremely old way to describe how a computer executes a set of instructions. The earliest known description is the &amp;ldquo;Great Peanut Butter Caper&amp;rdquo; by Lewandowski and Morehead in 1998. A variation was presented by Davis and Rebelsky in 2007. Unlike the original described exercises, this activity explores how to put together a Peanut Butter and Jelly sandwich in parallel</description>
    </item>
    
    <item>
      <title>CandySorting</title>
      <link>https://www.pdcunplugged.org/activities/candysorting/</link>
      <pubDate>Fri, 01 Nov 2019 14:23:28 -0400</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/candysorting/</guid>
      <description>Original Author/link iPDC Modules
 Available in Word and PDF   CS2013 Knowledge Unit Coverage Parallel Decomposition (Core Tier 1, Core Tier 2) 1. Core Tier 1: Explain why synchronization is necessary in a specific parallel program. [Usage]
2. Core Tier 1: Identify opportunities to partition a serial program into independent parallel modules. [Familiarity]
4. Core Tier 2: Parallelize an algorithm by applying task-based decomposition. [Usage]
Parallel Performance (Elective) 1.</description>
    </item>
    
    <item>
      <title>CardSorting</title>
      <link>https://www.pdcunplugged.org/activities/cardsorting/</link>
      <pubDate>Fri, 01 Nov 2019 12:39:05 -0400</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/cardsorting/</guid>
      <description>Original Author/link Originally described by Gregory F. Bachelis, David A. James, Bruce R. Maxim and Quentin F. Stout (Bachelis1994). Also alluded to by Garcia and (Moore2000).
Variation using a deck of playing cards by (Bogaerts2014 and Ghafoor2019):
iPDC Modules
 Available in Word and PDF  Similiar Exercises: Sorting: oddEvenTranspositionSort, ParallelRadixSort, PipelineSort, sortingNetwork
Other activities by authors (Bachelis1994): ParallelAddition, FindSmallestCard, SieveOfErastothenes, OddEvenTranspositionSort, PipelineSort
(Moore2000): SieveOfErastothenes, OddEvenTranspositionSort, MatrixAddition
(Ghafoor2019): ArraysInParallel, CandySorting, FindYoungestStudentInClass, PBJinParalell,</description>
    </item>
    
    <item>
      <title>ArraysinParallel</title>
      <link>https://www.pdcunplugged.org/activities/arraysinparallel/</link>
      <pubDate>Fri, 01 Nov 2019 11:58:18 -0400</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/arraysinparallel/</guid>
      <description>Original Author/link iPDC Modules
 Available in Word and PDF  CS2013 Knowledge Unit Coverage PD/Parallel Decomposition Core Tier1, Core Tier2 2. Core Tier 1:Identify opportunities to partition a serial program into independent parallel modules. [Familiarity]
5.\ Core Tier 2:Parallelize an algorithm by applying data-parallel decomposition. [Usage]
TCPP Coverage Programming Topics  Apply Data parallel: Be able to write a correct data parallel program for shared-memory machines and get speedup, should do an exercise.</description>
    </item>
    
    <item>
      <title>FindYoungestStudentInClass</title>
      <link>https://www.pdcunplugged.org/activities/findyoungeststudentinclass/</link>
      <pubDate>Fri, 01 Nov 2019 11:20:35 -0400</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/findyoungeststudentinclass/</guid>
      <description>Original Author/link Chitra P (iPDC Modules)
 Available in Word and PDF  Similar Activities FindOldestPenny, FindSmallestCard
CS2013 Knowledge Unit Coverage PD/Parallel Decomposition Core Tier 1 2. Identify opportunities to partition a serial program into independent parallel modules. [Familiarity]
TCPP Topics Coverage Algorithms Topics  Know Selection: Observe algorithms for finding order statistics, notably min and max. Understand that selection can always be accomplished by sorting but that direct algorithms may be simpler.</description>
    </item>
    
    <item>
      <title>OrangeGame</title>
      <link>https://www.pdcunplugged.org/activities/orangegame/</link>
      <pubDate>Fri, 01 Nov 2019 10:59:45 -0400</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/orangegame/</guid>
      <description>Original Author/link CSUnplugged.Org
CS2013 Knowledge Unit Coverage PD/Communication and Coordination Core Tier 2 Give an example of a scenario in which blocking message sends can deadlock. [Usage]  TCPP Coverage Programming Topics  Comprehend Deadlocks: Understand what a deadlock is, and methods for detecting and preventing them  Recommended Courses  K-12: CSUnplugged recommends this as a K-12 activity Systems/OS: The activity can also be used to introduce the concepts of concurrency and deadlock in undergraduate courses.</description>
    </item>
    
    <item>
      <title>SortingNetwork</title>
      <link>https://www.pdcunplugged.org/activities/sortingnetwork/</link>
      <pubDate>Fri, 01 Nov 2019 10:31:08 -0400</pubDate>
      
      <guid>https://www.pdcunplugged.org/activities/sortingnetwork/</guid>
      <description>Original Author/link CSUnplugged.Org
CS2013 Knowledge Unit Coverage N/A
TCPP Coverage Algorithms:  Know Sorting: Observe several sorting algorithms for varied platforms &amp;mdash; together with analyses. Parallel merge sort is the simplest example, but equally simple alternatives for rings and meshes might be covered also; more sophisticated algorithms might be covered in more advanced courses (1 hour)  Recommended Courses  K-12: CSUnplugged recommends this as a K-12 activity. CS1/CS2/DSA: The activity can be used to introduce students to parallel sorting concepts in undergraduate courses, but is inappropriate for large classes.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.pdcunplugged.org/access-overview/intentionally-left-blank/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.pdcunplugged.org/access-overview/intentionally-left-blank/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.pdcunplugged.org/course-overview/intentionally-left-blank/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.pdcunplugged.org/course-overview/intentionally-left-blank/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.pdcunplugged.org/cs2013-overview/intentionally-left-blank/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.pdcunplugged.org/cs2013-overview/intentionally-left-blank/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.pdcunplugged.org/tcpp-overview/intentionally-left-blank/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.pdcunplugged.org/tcpp-overview/intentionally-left-blank/</guid>
      <description></description>
    </item>
    
    <item>
      <title>About PDC Unplugged</title>
      <link>https://www.pdcunplugged.org/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.pdcunplugged.org/about/</guid>
      <description>What is PDC Unplugged? PDC Unplugged is a free resource for educators looking to integrate more PDC into their classrooms. We curate a collection of unplugged activities from the literature and around the web. Educators are free to use whichever activities they please, provided that they cite the source papers and PDC Unplugged.
 How to Contribute To contribute, please follow instructions on the contribute page.
How to Cite To cite a particular activity, please use the citation information that is listed at the bottom of that activity&amp;rsquo;s page.</description>
    </item>
    
    <item>
      <title>Contributing to PDC Unplugged</title>
      <link>https://www.pdcunplugged.org/contribute/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.pdcunplugged.org/contribute/</guid>
      <description>Everyone is welcome to contribute to PDC Unplugged! Please consider contributing if:
 If you have a great PDC unplugged activity that you created. If you know of a great PDC unplugged activity (be sure to provide links and/or citations). If you have assessed an existing listed unplugged activity. If you see typos or other need to correct an existing activity.  All submissions to PDC Unplugged are reviewed by the repository administrators.</description>
    </item>
    
  </channel>
</rss>