<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>K_Synchronization on PDC Unplugged</title>
    <link>http://suzannejmatthews.github.io/PDC-Unplugged/tcppdetails/k_synchronization/</link>
    <description>Recent content in K_Synchronization on PDC Unplugged</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 Nov 2019 11:07:01 -0500</lastBuildDate>
    
	<atom:link href="http://suzannejmatthews.github.io/PDC-Unplugged/tcppdetails/k_synchronization/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SweetenJuice</title>
      <link>http://suzannejmatthews.github.io/PDC-Unplugged/activities/sweetenjuice/</link>
      <pubDate>Thu, 07 Nov 2019 11:07:01 -0500</pubDate>
      
      <guid>http://suzannejmatthews.github.io/PDC-Unplugged/activities/sweetenjuice/</guid>
      <description>Original Author/link Originally described by Mordechai Ben-Ari and Yifat Ben-David Kolikant (Ben-Ari1999)
No web-link to independent description available. See paper (Ben-Ari1999) for additional details.
Details The paper uses dramatizations to help students understand algorithmic execution. The paper only describes one such lesson, which is used to introduce the concept of mutual exclusion. The following is a rough summar of the exercise in (Ben-Ari1999):
Two students volunteer to be robots. A drinking glass is placed at a visible point in the classroom, purporting to contain &amp;ldquo;juice&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>PBJinParallel</title>
      <link>http://suzannejmatthews.github.io/PDC-Unplugged/activities/pbjinparallel/</link>
      <pubDate>Fri, 01 Nov 2019 16:19:09 -0400</pubDate>
      
      <guid>http://suzannejmatthews.github.io/PDC-Unplugged/activities/pbjinparallel/</guid>
      <description>Original Author/link iPDC Modules
 Available in Word and PDF  CS2013 Knowledge Unit Coverage Communication and Coordination (Core Tier 1) 2. Core Tier 1: Give an example of an ordering of accesses among concurrent activities (e.g., program with a data race) that is not sequentially consistent. [Familiarity]
TCPP Topics Coverage Programming Topics  Comprehend Deadlocks: Understand what a deadlock is, and methods for detecting and preventing them
 Know Data Races: Know what a data race is, and how to use synchronization to prevent it.</description>
    </item>
    
  </channel>
</rss>