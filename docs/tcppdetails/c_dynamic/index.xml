<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C_Dynamic on PDC Unplugged</title>
    <link>https://suzannejmatthews.github.io/PDC-Unplugged/tcppdetails/c_dynamic/</link>
    <description>Recent content in C_Dynamic on PDC Unplugged</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Nov 2019 13:12:43 -0500</lastBuildDate>
    
	<atom:link href="https://suzannejmatthews.github.io/PDC-Unplugged/tcppdetails/c_dynamic/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JigsawPuzzle</title>
      <link>https://suzannejmatthews.github.io/PDC-Unplugged/activities/jigsawpuzzle/</link>
      <pubDate>Mon, 04 Nov 2019 13:12:43 -0500</pubDate>
      
      <guid>https://suzannejmatthews.github.io/PDC-Unplugged/activities/jigsawpuzzle/</guid>
      <description>Original Author/link Oklahoma Supercomputing Center for Educaton and Research (OSCER)
&amp;ldquo;Supercomputing in Plain English&amp;rdquo; - Overview, Slides 45-52.
 Available in: PPT and PDF Also described in (Neeman2006)  Variations It is theoretically possible to &amp;ldquo;act out&amp;rdquo; the analogy by using an actual puzzle. However, the puzzle needs to be small enough to enable students to complete the puzzle in a reasonable amount of time. This variation is described in (Neeman2006):</description>
    </item>
    
    <item>
      <title>CompanyAnalogy</title>
      <link>https://suzannejmatthews.github.io/PDC-Unplugged/activities/companyanalogy/</link>
      <pubDate>Fri, 01 Nov 2019 17:02:44 -0400</pubDate>
      
      <guid>https://suzannejmatthews.github.io/PDC-Unplugged/activities/companyanalogy/</guid>
      <description>Original Author/link Originally described by Nasser Giacaman (Giacaman2012).
No web-link to independent description available. See paper (Giacaman2012) for details.
Details The company analogy is used to introduce multicore systems:
 The processor is a &amp;ldquo;company&amp;rdquo; with &amp;ldquo;desks&amp;rdquo; representing multiple cores. Students (&amp;ldquo;employees&amp;rdquo;) are assigned/hired to sit at a desk to do work, representing threads (or processes). Work is written on &amp;ldquo;job cards&amp;rdquo; and represent tasks/runnables to be executed.
  To illustrate (under)utilization and resource contention/context switching:</description>
    </item>
    
  </channel>
</rss>